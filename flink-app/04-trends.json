{
    "sources": [
        {
            "create_table": "CREATE TABLE pizza_source (\n    id INT, \n    shop VARCHAR, \n    name VARCHAR, \n    phoneNumber VARCHAR, \n    address VARCHAR, \n    pizzas ARRAY <ROW (pizzaName VARCHAR, additionalToppings ARRAY <VARCHAR>)>, orderTimestamp TIMESTAMP(3) METADATA FROM 'timestamp', orderProctime AS PROCTIME(), WATERMARK FOR orderTimestamp AS orderTimestamp - INTERVAL '5' SECOND\n) WITH (\n    'connector' = 'kafka',\n    'properties.bootstrap.servers' = '',\n    'scan.startup.mode' = 'earliest-offset',\n    'topic' = 'pizzas',\n    'value.format' = 'json'\n)",
            "integration_id": "KAFKA_INTEGRATION_ID"
        }
    ],
    "sinks": [
        {
            "create_table": "CREATE TABLE pizza_orders_trend (\n    topping VARCHAR, \n    trend_start TIMESTAMP(3), \n    trend_detail VARCHAR, \n    PRIMARY KEY(topping, trend_start) NOT ENFORCED\n) WITH (\n   'connector' = 'upsert-kafka',\n   'properties.bootstrap.servers' = 'pizza_stream_out_trends',\n   'topic' = 'pizza_stream_out_trends',\n   'value.format' = 'json',\n   'key.format' = 'json'\n)",
            "integration_id": "KAFKA_INTEGRATION_ID"
        }
    ],
    "statement": "insert into pizza_orders_trend\n        with raw_data as (\n            select orderTimestamp,\n                id,\n                c.topping\n            from pizza_source\n                cross join UNNEST(pizzas) b\n                cross join UNNEST(b.additionalToppings) as c(topping)\n            )\n        , windowing as\n            (SELECT window_time,\n                window_start,\n                window_end,\n                topping,\n                count(*) nr_orders\n            FROM TABLE(TUMBLE(TABLE raw_data, DESCRIPTOR(orderTimestamp), interval '1' seconds))\n            where topping in ('🍍 pineapple', '🍓 strawberry','🍌 banana')\n            group by window_time,\n                topping,\n                window_start,\n                window_end)\n        select * from windowing\n        MATCH_RECOGNIZE (\n            PARTITION BY topping\n            ORDER BY window_time\n            MEASURES\n                START_ROW.window_time as start_tstamp,\n                LISTAGG(cast(nr_orders as string)) as various_nr_orders\n            ONE ROW PER MATCH\n            AFTER MATCH SKIP PAST LAST ROW\n            PATTERN (START_ROW NR_UP NR_DOWN)\n            DEFINE\n                NR_UP AS\n                     NR_UP.nr_orders > START_ROW.nr_orders,\n                NR_DOWN AS\n                    (NR_UP.nr_orders - NR_DOWN.nr_orders)*100.0/NR_UP.nr_orders > 30\n            )"
}